name: Package and Release Application with PyInstaller

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-release-windows:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
    # Step 1: Checkout the repository
    - uses: actions/checkout@v4

    # Step 2: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    # Step 3: Install Python dependencies
    - name: Install Dependencies
      env:
        PLAYWRIGHT_BROWSERS_PATH: C:\ms-playwright-browsers
      run: |
        pip install -r requirements.txt
        pip install pyinstaller playwright
        playwright install

    # Step 4: Package Application with PyInstaller for Windows
    - name: Package Application for Windows
      run: |
        python -m PyInstaller --onefile --add-data "C:\ms-playwright-browsers;playwright/driver/package/.local-browsers" main.py

    # Step 5: Copy settings.json to the dist directory
    - name: Prepare settings.json
      run: copy settings_example.json dist/settings.json

    # Step 6: Debug Dist Directory
    - name: Verify Dist Directory
      run: dir dist

    # Step 7: Delete Existing Release (if any)
    - name: Delete Existing Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release delete v1.0.0 -y || echo "No existing release to delete"

    # Step 8: Create a GitHub Release
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.0  
        release_name: Release v1.0.0
        draft: false
        prerelease: false

    # Step 9: Upload Windows main.exe to the Release
    - name: Upload Windows main.exe to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist\main.exe
        asset_name: main-windows.exe
        asset_content_type: application/octet-stream

    # Step 10: Upload settings.json to the Release
    - name: Upload settings.json to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist\settings.json
        asset_name: settings.json
        asset_content_type: application/json

  build-and-release-linux:
    runs-on: ubuntu-latest
    needs: build-and-release-windows

    steps:
    # Step 1: Checkout the repository
    - uses: actions/checkout@v4

    # Step 2: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    # Step 3: Install Python dependencies
    - name: Install Dependencies
      run: |
        export PLAYWRIGHT_BROWSERS_PATH=/tmp/ms-playwright-browsers
        pip install -r requirements.txt
        pip install pyinstaller playwright
        playwright install

    # Step 4: Resolve Playwright Cache Path
    - name: Get Playwright Browser Path
      run: echo "BROWSER_PATH=/tmp/ms-playwright-browsers" >> $GITHUB_ENV

    # Step 5: Package Application with PyInstaller for Linux
    - name: Package Application for Linux
      run: |
        python -m PyInstaller --onefile \
          --add-data "${BROWSER_PATH}:playwright/driver/package/.local-browsers" main.py

    # Step 6: Copy settings.json to the dist directory
    - name: Prepare settings.json
      run: cp settings_example.json dist/settings.json

    # Step 7: Wait for Release to Be Created
    - name: Wait for Release
      run: |
        while ! gh release view v1.0.0; do
          echo "Waiting for the release to be created..."
          sleep 10
        done

    # Step 8: Upload Linux main to the Release
    - name: Upload Linux main to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.build-and-release-windows.outputs.create_release.upload_url }}
        asset_path: dist/main
        asset_name: main-linux
        asset_content_type: application/octet-stream
